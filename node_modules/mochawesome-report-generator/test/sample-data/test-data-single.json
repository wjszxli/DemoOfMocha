{
  "stats": {
    "suites": 2,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2016-10-06T17:36:48.977Z",
    "end": "2016-10-06T17:36:49.884Z",
    "duration": 907,
    "testsRegistered": 1,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Master Test Suite",
        "suites": [
          {
            "title": "Test Suite - Basic",
            "suites": [],
            "tests": [
              {
                "title": "should fail when returned object does not match expected object",
                "fullTitle": "Master Test Suite Test Suite - Basic should fail when returned object does not match expected object",
                "timedOut": false,
                "duration": 14,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var o = retObj();\no.should.eql({});\ndone();",
                "err": {
                  "name": "AssertionError",
                  "actual": "{\n  \"employees\": {\n    \"employee\": [\n      {\n        \"firstName\": \"Tom\"\n        \"id\": \"1\"\n        \"lastName\": \"Cruise\"\n      }\n      {\n        \"firstName\": \"Maria\"\n        \"id\": \"2\"\n        \"lastName\": \"Sharapova\"\n      }\n      {\n        \"firstName\": \"James\"\n        \"id\": \"3\"\n        \"lastName\": \"Bond\"\n      }\n    ]\n  }\n}",
                  "expected": "{}",
                  "operator": "to equal",
                  "message": "expected { employees: \n   { employee: \n      [ { id: '1', firstName: 'Tom', lastName: 'Cruise' },\n        { id: '2', firstName: 'Maria', lastName: 'Sharapova' },\n        { id: '3', firstName: 'James', lastName: 'Bond' } ] } } to equal {}",
                  "generatedMessage": true,
                  "showDiff": true,
                  "estack": "AssertionError: expected { employees: \n   { employee: \n      [ { id: '1', firstName: 'Tom', lastName: 'Cruise' },\n        { id: '2', firstName: 'Maria', lastName: 'Sharapova' },\n        { id: '3', firstName: 'James', lastName: 'Bond' } ] } } to equal {}\n    at Assertion.prop.(anonymous function) (node_modules/should/lib/should.js:61:14)\n    at Context.<anonymous> (test-functional/test-single.js:33:16)",
                  "diff": "- {\n-   \"employees\": {\n-     \"employee\": [\n-       {\n-         \"firstName\": \"Tom\"\n-         \"id\": \"1\"\n-         \"lastName\": \"Cruise\"\n-       }\n-       {\n-         \"firstName\": \"Maria\"\n-         \"id\": \"2\"\n-         \"lastName\": \"Sharapova\"\n-       }\n-       {\n-         \"firstName\": \"James\"\n-         \"id\": \"3\"\n-         \"lastName\": \"Bond\"\n-       }\n-     ]\n-   }\n- }\n+ {}\n"
                },
                "isRoot": false,
                "uuid": "6c5cb7bd-f5a4-4f62-a530-456307f64201",
                "parentUUID": "8f25b07b-7710-4ee9-8e70-ccbf1e898c25",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test-functional/test-single.js",
            "uuid": "8f25b07b-7710-4ee9-8e70-ccbf1e898c25",
            "fullFile": "/Users/adamgruber/Sites/mochawesome/test-functional/test-single.js",
            "passes": [],
            "failures": [
              {
                "title": "should fail when returned object does not match expected object",
                "fullTitle": "Master Test Suite Test Suite - Basic should fail when returned object does not match expected object",
                "timedOut": false,
                "duration": 14,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var o = retObj();\no.should.eql({});\ndone();",
                "err": {
                  "name": "AssertionError",
                  "actual": "{\n  \"employees\": {\n    \"employee\": [\n      {\n        \"firstName\": \"Tom\"\n        \"id\": \"1\"\n        \"lastName\": \"Cruise\"\n      }\n      {\n        \"firstName\": \"Maria\"\n        \"id\": \"2\"\n        \"lastName\": \"Sharapova\"\n      }\n      {\n        \"firstName\": \"James\"\n        \"id\": \"3\"\n        \"lastName\": \"Bond\"\n      }\n    ]\n  }\n}",
                  "expected": "{}",
                  "operator": "to equal",
                  "message": "expected { employees: \n   { employee: \n      [ { id: '1', firstName: 'Tom', lastName: 'Cruise' },\n        { id: '2', firstName: 'Maria', lastName: 'Sharapova' },\n        { id: '3', firstName: 'James', lastName: 'Bond' } ] } } to equal {}",
                  "generatedMessage": true,
                  "showDiff": true,
                  "estack": "AssertionError: expected { employees: \n   { employee: \n      [ { id: '1', firstName: 'Tom', lastName: 'Cruise' },\n        { id: '2', firstName: 'Maria', lastName: 'Sharapova' },\n        { id: '3', firstName: 'James', lastName: 'Bond' } ] } } to equal {}\n    at Assertion.prop.(anonymous function) (node_modules/should/lib/should.js:61:14)\n    at Context.<anonymous> (test-functional/test-single.js:33:16)",
                  "diff": "- {\n-   \"employees\": {\n-     \"employee\": [\n-       {\n-         \"firstName\": \"Tom\"\n-         \"id\": \"1\"\n-         \"lastName\": \"Cruise\"\n-       }\n-       {\n-         \"firstName\": \"Maria\"\n-         \"id\": \"2\"\n-         \"lastName\": \"Sharapova\"\n-       }\n-       {\n-         \"firstName\": \"James\"\n-         \"id\": \"3\"\n-         \"lastName\": \"Bond\"\n-       }\n-     ]\n-   }\n- }\n+ {}\n"
                },
                "isRoot": false,
                "uuid": "6c5cb7bd-f5a4-4f62-a530-456307f64201",
                "parentUUID": "8f25b07b-7710-4ee9-8e70-ccbf1e898c25",
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 14
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test-functional/test-single.js",
        "uuid": "7fc95705-84b9-4216-92df-76229af846f9",
        "fullFile": "/Users/adamgruber/Sites/mochawesome/test-functional/test-single.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "47b1fc24-d807-4ddd-96eb-49e3d5d2affd",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should fail when returned object does not match expected object",
      "fullTitle": "Test Suite - Basic should fail when returned object does not match expected object",
      "timedOut": false,
      "duration": 14,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "var o = retObj();\no.should.eql({});\ndone();",
      "err": {
        "name": "AssertionError",
        "actual": "{\n  \"employees\": {\n    \"employee\": [\n      {\n        \"firstName\": \"Tom\"\n        \"id\": \"1\"\n        \"lastName\": \"Cruise\"\n      }\n      {\n        \"firstName\": \"Maria\"\n        \"id\": \"2\"\n        \"lastName\": \"Sharapova\"\n      }\n      {\n        \"firstName\": \"James\"\n        \"id\": \"3\"\n        \"lastName\": \"Bond\"\n      }\n    ]\n  }\n}",
        "expected": "{}",
        "operator": "to equal",
        "message": "expected { employees: \n   { employee: \n      [ { id: '1', firstName: 'Tom', lastName: 'Cruise' },\n        { id: '2', firstName: 'Maria', lastName: 'Sharapova' },\n        { id: '3', firstName: 'James', lastName: 'Bond' } ] } } to equal {}",
        "generatedMessage": true,
        "showDiff": true,
        "estack": "AssertionError: expected { employees: \n   { employee: \n      [ { id: '1', firstName: 'Tom', lastName: 'Cruise' },\n        { id: '2', firstName: 'Maria', lastName: 'Sharapova' },\n        { id: '3', firstName: 'James', lastName: 'Bond' } ] } } to equal {}\n    at Assertion.prop.(anonymous function) (node_modules/should/lib/should.js:61:14)\n    at Context.<anonymous> (test-functional/test-single.js:33:16)",
        "diff": "- {\n-   \"employees\": {\n-     \"employee\": [\n-       {\n-         \"firstName\": \"Tom\"\n-         \"id\": \"1\"\n-         \"lastName\": \"Cruise\"\n-       }\n-       {\n-         \"firstName\": \"Maria\"\n-         \"id\": \"2\"\n-         \"lastName\": \"Sharapova\"\n-       }\n-       {\n-         \"firstName\": \"James\"\n-         \"id\": \"3\"\n-         \"lastName\": \"Bond\"\n-       }\n-     ]\n-   }\n- }\n+ {}\n"
      },
      "isRoot": false,
      "uuid": "6c5cb7bd-f5a4-4f62-a530-456307f64201",
      "parentUUID": "8f25b07b-7710-4ee9-8e70-ccbf1e898c25",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [],
  "allFailures": [
    {
      "title": "should fail when returned object does not match expected object",
      "fullTitle": "Test Suite - Basic should fail when returned object does not match expected object",
      "timedOut": false,
      "duration": 14,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "var o = retObj();\no.should.eql({});\ndone();",
      "err": {
        "name": "AssertionError",
        "actual": "{\n  \"employees\": {\n    \"employee\": [\n      {\n        \"firstName\": \"Tom\"\n        \"id\": \"1\"\n        \"lastName\": \"Cruise\"\n      }\n      {\n        \"firstName\": \"Maria\"\n        \"id\": \"2\"\n        \"lastName\": \"Sharapova\"\n      }\n      {\n        \"firstName\": \"James\"\n        \"id\": \"3\"\n        \"lastName\": \"Bond\"\n      }\n    ]\n  }\n}",
        "expected": "{}",
        "operator": "to equal",
        "message": "expected { employees: \n   { employee: \n      [ { id: '1', firstName: 'Tom', lastName: 'Cruise' },\n        { id: '2', firstName: 'Maria', lastName: 'Sharapova' },\n        { id: '3', firstName: 'James', lastName: 'Bond' } ] } } to equal {}",
        "generatedMessage": true,
        "showDiff": true,
        "estack": "AssertionError: expected { employees: \n   { employee: \n      [ { id: '1', firstName: 'Tom', lastName: 'Cruise' },\n        { id: '2', firstName: 'Maria', lastName: 'Sharapova' },\n        { id: '3', firstName: 'James', lastName: 'Bond' } ] } } to equal {}\n    at Assertion.prop.(anonymous function) (node_modules/should/lib/should.js:61:14)\n    at Context.<anonymous> (test-functional/test-single.js:33:16)",
        "diff": "- {\n-   \"employees\": {\n-     \"employee\": [\n-       {\n-         \"firstName\": \"Tom\"\n-         \"id\": \"1\"\n-         \"lastName\": \"Cruise\"\n-       }\n-       {\n-         \"firstName\": \"Maria\"\n-         \"id\": \"2\"\n-         \"lastName\": \"Sharapova\"\n-       }\n-       {\n-         \"firstName\": \"James\"\n-         \"id\": \"3\"\n-         \"lastName\": \"Bond\"\n-       }\n-     ]\n-   }\n- }\n+ {}\n"
      },
      "isRoot": false,
      "uuid": "6c5cb7bd-f5a4-4f62-a530-456307f64201",
      "parentUUID": "8f25b07b-7710-4ee9-8e70-ccbf1e898c25",
      "skipped": false
    }
  ],
  "copyrightYear": 2016
}